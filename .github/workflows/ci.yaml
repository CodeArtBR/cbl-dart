name: CI

on:
  push:
  pull_request:

jobs:
  formatting-dart:
    name: Formatting - Dart
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Dart dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
            dart-pub-cache

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v1
        with:
          channel: dev

      - name: Print Flutter version
        run: flutter --version

      - name: Check formatting
        run: ./tools/packages.sh foreach dart format --set-exit-if-changed .

  formatting-clang:
    name: Formatting - Clang
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check formatting
        uses: jidicula/clang-format-action@v3.1.0
        with:
          check-path: 'cbl-dart/src'

  analyze-dart:
    name: Analyze Dart code
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache Dart dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
            dart-pub-cache

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v1
        with:
          channel: dev

      - name: Print Flutter version
        run: flutter --version

      - name: Install Dart dependencies
        run: ./tools/packages.sh foreach flutter pub get

      - name: Analyze code
        run: ./tools/packages.sh foreach flutter analyze

  build-binaries-linux:
    name: Build - Binaries - Linux
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: build-binaries-linux

      - name: Build
        run: |
          ./tools/build_linux.sh build
          ./tools/build_linux.sh copyToLib
          tar -czf binaries-linux.tar.gz -C build/linux/lib .

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries-linux
          path: binaries-linux.tar.gz

  build-binaries-android:
    name: Build - Binaries - Android
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: build-binaries-android

      - name: Build
        run: |
          ./tools/build_android.sh buildAllArchs
          ./tools/build_android.sh copyAllArchsToLib
          tar -czf binaries-android.tar.gz -C build/android/lib .

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries-android
          path: binaries-android.tar.gz

  build-binaries-apple:
    name: Build - Binaries - Apple
    runs-on: macos-10.15
    environment: Apple
    strategy:
      matrix:
        platform: [ios, ios_simulator, macos]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: build-binaries-apple-${{ matrix.platform }}

      # Doxygen is needed in build of Couchbase-Lite-C, which cannot be easily changed.
      # bash >=4 is needed in build_apple.sh.
      - name: Install dependencies with brew
        run: brew install doxygen bash

      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEV_CERT }}
          p12-password: ${{ secrets.APPLE_DEV_CERT_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_TMP_KEYCHAIN_PASSWORD }}

      - name: Build
        env:
          DEVELOPMENT_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM }}
        run: |
          ./tools/build_apple.sh buildPlatform ${{ matrix.platform }}
          tar -czf binaries-apple-${{ matrix.platform }}.tar.gz -C build/apple/archives .

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries-apple-${{ matrix.platform }}
          path: binaries-apple-${{ matrix.platform }}.tar.gz

  build-binaries-apple-xcframeworks:
    name: Build - Binaries - Apple - xcframeworks
    runs-on: macos-10.15
    needs: build-binaries-apple
    steps:
      - uses: actions/checkout@v2

      # bash >=4 is needed in build_apple.sh.
      - name: Install dependencies with brew
        run: brew install bash

      - name: Download ios binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-apple-ios

      - name: Download ios_simulator binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-apple-ios_simulator

      - name: Download macos binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-apple-macos

      - name: Unpack archives
        run: |
          tar -xzf binaries-apple-ios.tar.gz
          tar -xzf binaries-apple-ios_simulator.tar.gz
          tar -xzf binaries-apple-macos.tar.gz

      - name: Create xcframeworks
        run: |
          archivesDir="$PWD"
          frameworksDir="$PWD/Frameworks"
          ./tools/build_apple.sh createXcframeworks "$archivesDir" "$frameworksDir"
          tar -czf binaries-apple-xcframeworks.tar.gz -C "$frameworksDir" .

      - name: Upload xcframeworks
        uses: actions/upload-artifact@v2
        with:
          name: binaries-apple-xcframeworks
          path: binaries-apple-xcframeworks.tar.gz

  tests-cbl:
    name: Tests - cbl
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Dart SDK
        uses: dart-lang/setup-dart@v0.5
        with:
          sdk: beta

      - name: Cache Dart dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
            dart-pub-cache

      - name: Install Dart dependencies
        working-directory: packages/cbl
        run: dart pub get

      - name: Run tests
        working-directory: packages/cbl
        run: dart test -r expanded

  tests-standalone-dart-linux:
    name: Tests - Standalone Dart - Linux
    runs-on: ubuntu-20.04
    needs: build-binaries-linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-linux

      - name: Extract binaries
        working-directory: packages/cbl_e2e_tests_standalone_dart
        run: |
          mkdir lib
          tar -xzf ../../binaries-linux.tar.gz -C lib

      - name: Install Dart SDK
        uses: dart-lang/setup-dart@v0.5
        with:
          sdk: beta

      - name: Cache Dart dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
            dart-pub-cache

      - name: Install Dart dependencies
        working-directory: packages/cbl_e2e_tests_standalone_dart
        run: dart pub get

      - name: Run tests
        working-directory: packages/cbl_e2e_tests_standalone_dart
        env:
          LD_LIBRARY_PATH: ./lib
        run: dart test -r expanded

  tests-standalone-dart-macos:
    name: Tests - Standalone Dart - macOS
    runs-on: macos-10.15
    needs: build-binaries-apple
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-apple-macos

      - name: Extract frameworks from archive
        working-directory: packages/cbl_e2e_tests_standalone_dart
        run: |
          tar -xzf ../../binaries-apple-macos.tar.gz 
          cp -a macos.xcarchive/Products/Library/Frameworks .

      - name: Install Dart SDK
        uses: dart-lang/setup-dart@v0.5
        with:
          sdk: beta

      - name: Cache Dart dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
            dart-pub-cache

      - name: Install Dart dependencies
        working-directory: packages/cbl_e2e_tests_standalone_dart
        run: dart pub get

      - name: Run tests
        working-directory: packages/cbl_e2e_tests_standalone_dart
        run: dart test -r expanded

  tests-flutter-ios:
    name: Tests - Flutter - iOS
    runs-on: macos-10.15
    needs: build-binaries-apple-xcframeworks
    environment: Apple
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_DEV_CERT }}
          p12-password: ${{ secrets.APPLE_DEV_CERT_PASSWORD }}
          keychain-password: ${{ secrets.APPLE_TMP_KEYCHAIN_PASSWORD }}

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-apple-xcframeworks

      - name: Extract frameworks from archive
        run: |
          mkdir -p packages/cbl_flutter_apple/Frameworks
          tar -xzf binaries-apple-xcframeworks.tar.gz -C packages/cbl_flutter_apple/Frameworks

      - name: Cache Dart dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
            dart-pub-cache

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v1
        with:
          channel: dev

      - name: Print Flutter version
        run: flutter --version

      - name: Install Dart dependencies
        working-directory: packages/cbl_flutter/example
        run: flutter pub get

      - name: Build tests
        working-directory: packages/cbl_flutter/example
        run: flutter build ios --simulator integration_test/cbl_e2e_test.dart

      - name: Run tests
        working-directory: packages/cbl_flutter/example/ios
        run: fastlane test

  tests-flutter-macos:
    name: Tests - Flutter - macOS
    runs-on: macos-10.15
    needs: build-binaries-apple-xcframeworks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-apple-xcframeworks

      - name: Extract frameworks from archive
        run: |
          mkdir -p packages/cbl_flutter_apple/Frameworks
          tar -xzf binaries-apple-xcframeworks.tar.gz -C packages/cbl_flutter_apple/Frameworks

      - name: Cache Dart dependencies
        uses: actions/cache@v2
        with:
          path: ~/.pub-cache
          key: dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            dart-pub-cache-${{ hashFiles('**/pubspec.yaml') }}
            dart-pub-cache

      - name: Install Flutter SDK
        uses: subosito/flutter-action@v1
        with:
          channel: dev

      - name: Print Flutter version
        run: flutter --version

      - name: Enable Flutter on macOS 
        run: flutter config --enable-macos-desktop

      - name: Install Dart dependencies
        working-directory: packages/cbl_flutter/example
        run: flutter pub get

      - name: Run tests
        working-directory: packages/cbl_flutter/example
        run: | 
          flutter drive \
            -d macos \
            --driver test_driver/integration_test.dart \
            --target integration_test/cbl_e2e_test.dart
